// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the data model
model Student {
  id                Int                 @id @default(autoincrement())
  pin               String
  phone             String
  group             String
  grades            Student_Grade[]
  contracts         Contract[]
  Student_Job_Offer Student_Job_Offer[]
}

model Student_Grade {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  subject   String
  grade     String
}

model Company {
  id               Int            @id @default(autoincrement())
  name             String
  regnr            String
  contactFirstName String
  contactLastName  String
  contactPhone     String
  contactEmail     String
  logo             String
  contracts        Contract[]
  jobOffers        Job_Offer[]
  users            Company_User[]
}

model Contract {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  fileExt   String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime
}

model Job_Offer {
  id               Int                 @id @default(autoincrement())
  company          Company             @relation(fields: [companyId], references: [id])
  companyId        Int
  createdAt        DateTime
  title            String
  desc             String
  deadline         DateTime
  poster           String
  tags             String
  speciality       Speciality
  studentJobOffers Student_Job_Offer[]
}

model Student_Job_Offer {
  student         Student   @relation(fields: [studentId], references: [id])
  studentId       Int
  jobOffer        Job_Offer @relation(fields: [jobOfferId], references: [id])
  jobOfferId      Int
  acceptedAt      DateTime?
  acceptedBy      Int?
  rejectedAt      DateTime?
  rejectedBy      Int?
  rejectedComment String?

  @@id([studentId, jobOfferId])
}

model User {
  id           Int               @id @default(autoincrement())
  email        String            @unique
  password     String
  firstName    String
  lastName     String
  roles        User_Role[]
  permissions  User_Permission[]
  Role         Role?             @relation(fields: [roleId], references: [id])
  roleId       Int?
  Company_User Company_User[]
}

model Role_Permission {
  roleId       Int
  permissionId String

  @@id([roleId, permissionId])
}

model User_Permission {
  userId       Int
  permissionId String
  User         User   @relation(fields: [userId], references: [id])

  @@id([userId, permissionId])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model User_Role {
  userId Int
  roleId Int
  User   User @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Company_User {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  @@id([userId, companyId])
}

enum Speciality {
  // Define your specialities here, for example:
  Engineering
  Marketing
  Design
}